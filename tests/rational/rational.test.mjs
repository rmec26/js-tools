
import { describe, test, expect } from "../../src/simpleTest.mjs";
import { Rational, RationalNumber } from "../../src/rational.mjs";

describe("Rational.mjs", () => {
  describe("parseString", () => {
    test("Should parse '0'", () => {
      expect(RationalNumber.parseString("0")).toEqual({
        isNegativeNumber: false,
        numerator: 0n,
        divider: 1n
      })
    })
    test("Should parse '0/1'", () => {
      expect(RationalNumber.parseString("0/1")).toEqual({
        isNegativeNumber: false,
        numerator: 0n,
        divider: 1n
      })
    })
    test("Should parse '0/25'", () => {
      expect(RationalNumber.parseString("0/25")).toEqual({
        isNegativeNumber: false,
        numerator: 0n,
        divider: 1n
      })
    })
    test("Should parse '12'", () => {
      expect(RationalNumber.parseString("12")).toEqual({
        isNegativeNumber: false,
        numerator: 12n,
        divider: 1n
      })
    })
    test("Should parse '12/25'", () => {
      expect(RationalNumber.parseString("12/25")).toEqual({
        isNegativeNumber: false,
        numerator: 12n,
        divider: 25n
      })
    })
    test("Should parse '0.25'", () => {
      expect(RationalNumber.parseString("0.25")).toEqual({
        isNegativeNumber: false,
        numerator: 1n,
        divider: 4n
      })
    })
    test("Should parse '0.025'", () => {
      expect(RationalNumber.parseString("0.025")).toEqual({
        isNegativeNumber: false,
        numerator: 1n,
        divider: 40n
      })
    })
    test("Should parse '12.25'", () => {
      expect(RationalNumber.parseString("12.25")).toEqual({
        isNegativeNumber: false,
        numerator: 49n,
        divider: 4n
      })
    })
    test("Should parse '12.0'", () => {
      expect(RationalNumber.parseString("12.0")).toEqual({
        isNegativeNumber: false,
        numerator: 12n,
        divider: 1n
      })
    })
    test("Should parse '12.025'", () => {
      expect(RationalNumber.parseString("12.025")).toEqual({
        isNegativeNumber: false,
        numerator: 481n,
        divider: 40n
      })
    })
    test("Should parse '012.250'", () => {
      expect(RationalNumber.parseString("012.250")).toEqual({
        isNegativeNumber: false,
        numerator: 49n,
        divider: 4n
      })
    })
    test("Should parse '.25'", () => {
      expect(RationalNumber.parseString(".25")).toEqual({
        isNegativeNumber: false,
        numerator: 1n,
        divider: 4n
      })
    })
    test("Should parse '12,25'", () => {
      expect(RationalNumber.parseString("12,25")).toEqual({
        isNegativeNumber: false,
        numerator: 49n,
        divider: 4n
      })
    })
    test("Should parse '12.25e3'", () => {
      expect(RationalNumber.parseString("12.25e3")).toEqual({
        isNegativeNumber: false,
        numerator: 12250n,
        divider: 1n
      })
    })
    test("Should parse '12.25e+3'", () => {
      expect(RationalNumber.parseString("12.25e+3")).toEqual({
        isNegativeNumber: false,
        numerator: 12250n,
        divider: 1n
      })
    })
    test("Should parse '12.25e-3'", () => {
      expect(RationalNumber.parseString("12.25e-3")).toEqual({
        isNegativeNumber: false,
        numerator: 49n,
        divider: 4000n
      })
    })
    test("Should parse '-0'", () => {
      expect(RationalNumber.parseString("-0")).toEqual({
        isNegativeNumber: false,
        numerator: 0n,
        divider: 1n
      })
    })
    test("Should parse '-0/1'", () => {
      expect(RationalNumber.parseString("-0/1")).toEqual({
        isNegativeNumber: false,
        numerator: 0n,
        divider: 1n
      })
    })
    test("Should parse '-0/25'", () => {
      expect(RationalNumber.parseString("-0/25")).toEqual({
        isNegativeNumber: false,
        numerator: 0n,
        divider: 1n
      })
    })
    test("Should parse '-12'", () => {
      expect(RationalNumber.parseString("-12")).toEqual({
        isNegativeNumber: true,
        numerator: 12n,
        divider: 1n
      })
    })
    test("Should parse '-12/25'", () => {
      expect(RationalNumber.parseString("-12/25")).toEqual({
        isNegativeNumber: true,
        numerator: 12n,
        divider: 25n
      })
    })
    test("Should parse '-0.25'", () => {
      expect(RationalNumber.parseString("-0.25")).toEqual({
        isNegativeNumber: true,
        numerator: 1n,
        divider: 4n
      })
    })
    test("Should parse '-0.025'", () => {
      expect(RationalNumber.parseString("-0.025")).toEqual({
        isNegativeNumber: true,
        numerator: 1n,
        divider: 40n
      })
    })
    test("Should parse '-12.25'", () => {
      expect(RationalNumber.parseString("-12.25")).toEqual({
        isNegativeNumber: true,
        numerator: 49n,
        divider: 4n
      })
    })
    test("Should parse '-12.0'", () => {
      expect(RationalNumber.parseString("-12.0")).toEqual({
        isNegativeNumber: true,
        numerator: 12n,
        divider: 1n
      })
    })
    test("Should parse '-12.025'", () => {
      expect(RationalNumber.parseString("-12.025")).toEqual({
        isNegativeNumber: true,
        numerator: 481n,
        divider: 40n
      })
    })
    test("Should parse '-012.250'", () => {
      expect(RationalNumber.parseString("-012.250")).toEqual({
        isNegativeNumber: true,
        numerator: 49n,
        divider: 4n
      })
    })
    test("Should parse '-.25'", () => {
      expect(RationalNumber.parseString("-.25")).toEqual({
        isNegativeNumber: true,
        numerator: 1n,
        divider: 4n
      })
    })
    test("Should parse '-12,25'", () => {
      expect(RationalNumber.parseString("-12,25")).toEqual({
        isNegativeNumber: true,
        numerator: 49n,
        divider: 4n
      })
    })
    test("Should parse '-12.25e3'", () => {
      expect(RationalNumber.parseString("-12.25e3")).toEqual({
        isNegativeNumber: true,
        numerator: 12250n,
        divider: 1n
      })
    })
    test("Should parse '-12.25e+3'", () => {
      expect(RationalNumber.parseString("-12.25e+3")).toEqual({
        isNegativeNumber: true,
        numerator: 12250n,
        divider: 1n
      })
    })
    test("Should parse '-12.25e-3'", () => {
      expect(RationalNumber.parseString("-12.25e-3")).toEqual({
        isNegativeNumber: true,
        numerator: 49n,
        divider: 4000n
      })
    })
  })
  describe("toString", () => {
    const numbers = [
      "0",
      "-0",
      "0.1",
      "0.01",
      "0.001",
      "0.0001",
      "0.00001",
      "0.9",
      "0.09",
      "0.009",
      "0.0009",
      "0.00009",
      "1",
      "1.1",
      "1.11",
      "1.111",
      "1.1111",
      "1.11111",
      "-1",
      "-1.9",
      "-1.19",
      "-1.119",
      "-1.1119",
      "-1.11119",
      "9",
      "9.9",
      "9.99",
      "9.999",
      "9.9999",
      "9.99999",
    ]
    test("Without options", () => {
      expect(numbers.map(x => Rational(x).toString())).toEqual([
        "0",
        "0",
        "1/10",
        "1/100",
        "1/1000",
        "1/10000",
        "1/100000",
        "9/10",
        "9/100",
        "9/1000",
        "9/10000",
        "9/100000",
        "1",
        "11/10",
        "111/100",
        "1111/1000",
        "11111/10000",
        "111111/100000",
        "-1",
        "-19/10",
        "-119/100",
        "-1119/1000",
        "-11119/10000",
        "-111119/100000",
        "9",
        "99/10",
        "999/100",
        "9999/1000",
        "99999/10000",
        "999999/100000"
      ])
    })
    test("With fractSize set to 0", () => {
      expect(numbers.map(x => Rational(x).toString(0))).toEqual([
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "-1",
        "-2",
        "-1",
        "-1",
        "-1",
        "-1",
        "9",
        "10",
        "10",
        "10",
        "10",
        "10"
      ])
    })
    test("With fractSize set to 0 and trimZeroes set to false", () => {
      expect(numbers.map(x => Rational(x).toString(0, false))).toEqual([
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "1",
        "0",
        "0",
        "0",
        "0",
        "1",
        "1",
        "1",
        "1",
        "1",
        "1",
        "-1",
        "-2",
        "-1",
        "-1",
        "-1",
        "-1",
        "9",
        "10",
        "10",
        "10",
        "10",
        "10"
      ])
    })
    test("With fractSize set to 1", () => {
      expect(numbers.map(x => Rational(x).toString(1))).toEqual([
        "0",
        "0",
        "0.1",
        "0",
        "0",
        "0",
        "0",
        "0.9",
        "0.1",
        "0",
        "0",
        "0",
        "1",
        "1.1",
        "1.1",
        "1.1",
        "1.1",
        "1.1",
        "-1",
        "-1.9",
        "-1.2",
        "-1.1",
        "-1.1",
        "-1.1",
        "9",
        "9.9",
        "10",
        "10",
        "10",
        "10"
      ])
    })
    test("With fractSize set to 1 and trimZeroes set to false", () => {
      expect(numbers.map(x => Rational(x).toString(1, false))).toEqual([
        "0.0",
        "0.0",
        "0.1",
        "0.0",
        "0.0",
        "0.0",
        "0.0",
        "0.9",
        "0.1",
        "0.0",
        "0.0",
        "0.0",
        "1.0",
        "1.1",
        "1.1",
        "1.1",
        "1.1",
        "1.1",
        "-1.0",
        "-1.9",
        "-1.2",
        "-1.1",
        "-1.1",
        "-1.1",
        "9.0",
        "9.9",
        "10.0",
        "10.0",
        "10.0",
        "10.0"
      ])
    })
    test("With fractSize set to 2", () => {
      expect(numbers.map(x => Rational(x).toString(2))).toEqual([
        "0",
        "0",
        "0.1",
        "0.01",
        "0",
        "0",
        "0",
        "0.9",
        "0.09",
        "0.01",
        "0",
        "0",
        "1",
        "1.1",
        "1.11",
        "1.11",
        "1.11",
        "1.11",
        "-1",
        "-1.9",
        "-1.19",
        "-1.12",
        "-1.11",
        "-1.11",
        "9",
        "9.9",
        "9.99",
        "10",
        "10",
        "10"
      ])
    })
    test("With fractSize set to 2 and trimZeroes set to false", () => {
      expect(numbers.map(x => Rational(x).toString(2, false))).toEqual([
        "0.00",
        "0.00",
        "0.10",
        "0.01",
        "0.00",
        "0.00",
        "0.00",
        "0.90",
        "0.09",
        "0.01",
        "0.00",
        "0.00",
        "1.00",
        "1.10",
        "1.11",
        "1.11",
        "1.11",
        "1.11",
        "-1.00",
        "-1.90",
        "-1.19",
        "-1.12",
        "-1.11",
        "-1.11",
        "9.00",
        "9.90",
        "9.99",
        "10.00",
        "10.00",
        "10.00"
      ])
    })
    test("With fractSize set to 3", () => {
      expect(numbers.map(x => Rational(x).toString(3))).toEqual([
        "0",
        "0",
        "0.1",
        "0.01",
        "0.001",
        "0",
        "0",
        "0.9",
        "0.09",
        "0.009",
        "0.001",
        "0",
        "1",
        "1.1",
        "1.11",
        "1.111",
        "1.111",
        "1.111",
        "-1",
        "-1.9",
        "-1.19",
        "-1.119",
        "-1.112",
        "-1.111",
        "9",
        "9.9",
        "9.99",
        "9.999",
        "10",
        "10"
      ])
    })
    test("With fractSize set to 3 and trimZeroes set to false", () => {
      expect(numbers.map(x => Rational(x).toString(3, false))).toEqual([
        "0.000",
        "0.000",
        "0.100",
        "0.010",
        "0.001",
        "0.000",
        "0.000",
        "0.900",
        "0.090",
        "0.009",
        "0.001",
        "0.000",
        "1.000",
        "1.100",
        "1.110",
        "1.111",
        "1.111",
        "1.111",
        "-1.000",
        "-1.900",
        "-1.190",
        "-1.119",
        "-1.112",
        "-1.111",
        "9.000",
        "9.900",
        "9.990",
        "9.999",
        "10.000",
        "10.000"
      ])
    })
    test("With fractSize set to 4", () => {
      expect(numbers.map(x => Rational(x).toString(4))).toEqual([
        "0",
        "0",
        "0.1",
        "0.01",
        "0.001",
        "0.0001",
        "0",
        "0.9",
        "0.09",
        "0.009",
        "0.0009",
        "0.0001",
        "1",
        "1.1",
        "1.11",
        "1.111",
        "1.1111",
        "1.1111",
        "-1",
        "-1.9",
        "-1.19",
        "-1.119",
        "-1.1119",
        "-1.1112",
        "9",
        "9.9",
        "9.99",
        "9.999",
        "9.9999",
        "10"
      ])
    })
    test("With fractSize set to 4 and trimZeroes set to false", () => {
      expect(numbers.map(x => Rational(x).toString(4, false))).toEqual([
        "0.0000",
        "0.0000",
        "0.1000",
        "0.0100",
        "0.0010",
        "0.0001",
        "0.0000",
        "0.9000",
        "0.0900",
        "0.0090",
        "0.0009",
        "0.0001",
        "1.0000",
        "1.1000",
        "1.1100",
        "1.1110",
        "1.1111",
        "1.1111",
        "-1.0000",
        "-1.9000",
        "-1.1900",
        "-1.1190",
        "-1.1119",
        "-1.1112",
        "9.0000",
        "9.9000",
        "9.9900",
        "9.9990",
        "9.9999",
        "10.0000"
      ])
    })
    test("With fractSize set to 5", () => {
      expect(numbers.map(x => Rational(x).toString(5))).toEqual([
        "0",
        "0",
        "0.1",
        "0.01",
        "0.001",
        "0.0001",
        "0.00001",
        "0.9",
        "0.09",
        "0.009",
        "0.0009",
        "0.00009",
        "1",
        "1.1",
        "1.11",
        "1.111",
        "1.1111",
        "1.11111",
        "-1",
        "-1.9",
        "-1.19",
        "-1.119",
        "-1.1119",
        "-1.11119",
        "9",
        "9.9",
        "9.99",
        "9.999",
        "9.9999",
        "9.99999"
      ])
    })
    test("With fractSize set to 5 and trimZeroes set to false", () => {
      expect(numbers.map(x => Rational(x).toString(5, false))).toEqual([
        "0.00000",
        "0.00000",
        "0.10000",
        "0.01000",
        "0.00100",
        "0.00010",
        "0.00001",
        "0.90000",
        "0.09000",
        "0.00900",
        "0.00090",
        "0.00009",
        "1.00000",
        "1.10000",
        "1.11000",
        "1.11100",
        "1.11110",
        "1.11111",
        "-1.00000",
        "-1.90000",
        "-1.19000",
        "-1.11900",
        "-1.11190",
        "-1.11119",
        "9.00000",
        "9.90000",
        "9.99000",
        "9.99900",
        "9.99990",
        "9.99999"
      ])
    })
    test("With fractSize set to 6", () => {
      expect(numbers.map(x => Rational(x).toString(6))).toEqual([
        "0",
        "0",
        "0.1",
        "0.01",
        "0.001",
        "0.0001",
        "0.00001",
        "0.9",
        "0.09",
        "0.009",
        "0.0009",
        "0.00009",
        "1",
        "1.1",
        "1.11",
        "1.111",
        "1.1111",
        "1.11111",
        "-1",
        "-1.9",
        "-1.19",
        "-1.119",
        "-1.1119",
        "-1.11119",
        "9",
        "9.9",
        "9.99",
        "9.999",
        "9.9999",
        "9.99999"
      ])
    })
    test("With fractSize set to 6 and trimZeroes set to false", () => {
      expect(numbers.map(x => Rational(x).toString(6, false))).toEqual([
        "0.000000",
        "0.000000",
        "0.100000",
        "0.010000",
        "0.001000",
        "0.000100",
        "0.000010",
        "0.900000",
        "0.090000",
        "0.009000",
        "0.000900",
        "0.000090",
        "1.000000",
        "1.100000",
        "1.110000",
        "1.111000",
        "1.111100",
        "1.111110",
        "-1.000000",
        "-1.900000",
        "-1.190000",
        "-1.119000",
        "-1.111900",
        "-1.111190",
        "9.000000",
        "9.900000",
        "9.990000",
        "9.999000",
        "9.999900",
        "9.999990"
      ])
    })
  })

  describe("toScientificNotation", () => {
    const numbers = [
      "0",
      "-0",
      "0.1",
      "0.01",
      "0.001",
      "0.0001",
      "0.00001",
      "0.9",
      "0.09",
      "0.009",
      "0.0009",
      "0.00009",
      "1",
      "1.1",
      "1.11",
      "1.111",
      "1.1111",
      "1.11111",
      "-1",
      "-1.9",
      "-1.19",
      "-1.119",
      "-1.1119",
      "-1.11119",
      "9",
      "9.9",
      "9.99",
      "9.999",
      "9.9999",
      "9.99999",
      "11",
      "111",
      "1111",
      "11111",
      "111111",
      "-19",
      "-119",
      "-1119",
      "-11119",
      "-111119",
      "99",
      "999",
      "9999",
      "99999",
      "999999",
      "-99",
      "-999",
      "-9999",
      "-99999",
      "-999999",
    ]
    test("Without options", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation())).toEqual([
        "0.00000e0",
        "0.00000e0",
        "1.00000e-1",
        "1.00000e-2",
        "1.00000e-3",
        "1.00000e-4",
        "1.00000e-5",
        "9.00000e-1",
        "9.00000e-2",
        "9.00000e-3",
        "9.00000e-4",
        "9.00000e-5",
        "1.00000e0",
        "1.10000e0",
        "1.11000e0",
        "1.11100e0",
        "1.11110e0",
        "1.11111e0",
        "-1.00000e0",
        "-1.90000e0",
        "-1.19000e0",
        "-1.11900e0",
        "-1.11190e0",
        "-1.11119e0",
        "9.00000e0",
        "9.90000e0",
        "9.99000e0",
        "9.99900e0",
        "9.99990e0",
        "9.99999e0",
        "1.10000e1",
        "1.11000e2",
        "1.11100e3",
        "1.11110e4",
        "1.11111e5",
        "-1.90000e1",
        "-1.19000e2",
        "-1.11900e3",
        "-1.11190e4",
        "-1.11119e5",
        "9.90000e1",
        "9.99000e2",
        "9.99900e3",
        "9.99990e4",
        "9.99999e5",
        "-9.90000e1",
        "-9.99000e2",
        "-9.99900e3",
        "-9.99990e4",
        "-9.99999e5"
      ])
    })
    test("With fractSize set to 0", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(0))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1e0",
        "1e0",
        "1e0",
        "1e0",
        "1e0",
        "-1e0",
        "-2e0",
        "-1e0",
        "-1e0",
        "-1e0",
        "-1e0",
        "9e0",
        "1e1",
        "1e1",
        "1e1",
        "1e1",
        "1e1",
        "1e1",
        "1e2",
        "1e3",
        "1e4",
        "1e5",
        "-2e1",
        "-1e2",
        "-1e3",
        "-1e4",
        "-1e5",
        "1e2",
        "1e3",
        "1e4",
        "1e5",
        "1e6",
        "-1e2",
        "-1e3",
        "-1e4",
        "-1e5",
        "-1e6"
      ])
    })
    test("With fractSize set to 0 and trimZeroes set to true", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(0, true))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1e0",
        "1e0",
        "1e0",
        "1e0",
        "1e0",
        "-1e0",
        "-2e0",
        "-1e0",
        "-1e0",
        "-1e0",
        "-1e0",
        "9e0",
        "1e1",
        "1e1",
        "1e1",
        "1e1",
        "1e1",
        "1e1",
        "1e2",
        "1e3",
        "1e4",
        "1e5",
        "-2e1",
        "-1e2",
        "-1e3",
        "-1e4",
        "-1e5",
        "1e2",
        "1e3",
        "1e4",
        "1e5",
        "1e6",
        "-1e2",
        "-1e3",
        "-1e4",
        "-1e5",
        "-1e6"
      ])
    })
    test("With fractSize set to 1", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(1))).toEqual([
        "0.0e0",
        "0.0e0",
        "1.0e-1",
        "1.0e-2",
        "1.0e-3",
        "1.0e-4",
        "1.0e-5",
        "9.0e-1",
        "9.0e-2",
        "9.0e-3",
        "9.0e-4",
        "9.0e-5",
        "1.0e0",
        "1.1e0",
        "1.1e0",
        "1.1e0",
        "1.1e0",
        "1.1e0",
        "-1.0e0",
        "-1.9e0",
        "-1.2e0",
        "-1.1e0",
        "-1.1e0",
        "-1.1e0",
        "9.0e0",
        "9.9e0",
        "1.0e1",
        "1.0e1",
        "1.0e1",
        "1.0e1",
        "1.1e1",
        "1.1e2",
        "1.1e3",
        "1.1e4",
        "1.1e5",
        "-1.9e1",
        "-1.2e2",
        "-1.1e3",
        "-1.1e4",
        "-1.1e5",
        "9.9e1",
        "1.0e3",
        "1.0e4",
        "1.0e5",
        "1.0e6",
        "-9.9e1",
        "-1.0e3",
        "-1.0e4",
        "-1.0e5",
        "-1.0e6"
      ])
    })
    test("With fractSize set to 1 and trimZeroes set to true", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(1, true))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1.1e0",
        "1.1e0",
        "1.1e0",
        "1.1e0",
        "1.1e0",
        "-1e0",
        "-1.9e0",
        "-1.2e0",
        "-1.1e0",
        "-1.1e0",
        "-1.1e0",
        "9e0",
        "9.9e0",
        "1e1",
        "1e1",
        "1e1",
        "1e1",
        "1.1e1",
        "1.1e2",
        "1.1e3",
        "1.1e4",
        "1.1e5",
        "-1.9e1",
        "-1.2e2",
        "-1.1e3",
        "-1.1e4",
        "-1.1e5",
        "9.9e1",
        "1e3",
        "1e4",
        "1e5",
        "1e6",
        "-9.9e1",
        "-1e3",
        "-1e4",
        "-1e5",
        "-1e6"
      ])
    })
    test("With fractSize set to 2", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(2))).toEqual([
        "0.00e0",
        "0.00e0",
        "1.00e-1",
        "1.00e-2",
        "1.00e-3",
        "1.00e-4",
        "1.00e-5",
        "9.00e-1",
        "9.00e-2",
        "9.00e-3",
        "9.00e-4",
        "9.00e-5",
        "1.00e0",
        "1.10e0",
        "1.11e0",
        "1.11e0",
        "1.11e0",
        "1.11e0",
        "-1.00e0",
        "-1.90e0",
        "-1.19e0",
        "-1.12e0",
        "-1.11e0",
        "-1.11e0",
        "9.00e0",
        "9.90e0",
        "9.99e0",
        "1.00e1",
        "1.00e1",
        "1.00e1",
        "1.10e1",
        "1.11e2",
        "1.11e3",
        "1.11e4",
        "1.11e5",
        "-1.90e1",
        "-1.19e2",
        "-1.12e3",
        "-1.11e4",
        "-1.11e5",
        "9.90e1",
        "9.99e2",
        "1.00e4",
        "1.00e5",
        "1.00e6",
        "-9.90e1",
        "-9.99e2",
        "-1.00e4",
        "-1.00e5",
        "-1.00e6"
      ])
    })
    test("With fractSize set to 2 and trimZeroes set to true", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(2, true))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1.1e0",
        "1.11e0",
        "1.11e0",
        "1.11e0",
        "1.11e0",
        "-1e0",
        "-1.9e0",
        "-1.19e0",
        "-1.12e0",
        "-1.11e0",
        "-1.11e0",
        "9e0",
        "9.9e0",
        "9.99e0",
        "1e1",
        "1e1",
        "1e1",
        "1.1e1",
        "1.11e2",
        "1.11e3",
        "1.11e4",
        "1.11e5",
        "-1.9e1",
        "-1.19e2",
        "-1.12e3",
        "-1.11e4",
        "-1.11e5",
        "9.9e1",
        "9.99e2",
        "1e4",
        "1e5",
        "1e6",
        "-9.9e1",
        "-9.99e2",
        "-1e4",
        "-1e5",
        "-1e6"
      ])
    })
    test("With fractSize set to 3", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(3))).toEqual([
        "0.000e0",
        "0.000e0",
        "1.000e-1",
        "1.000e-2",
        "1.000e-3",
        "1.000e-4",
        "1.000e-5",
        "9.000e-1",
        "9.000e-2",
        "9.000e-3",
        "9.000e-4",
        "9.000e-5",
        "1.000e0",
        "1.100e0",
        "1.110e0",
        "1.111e0",
        "1.111e0",
        "1.111e0",
        "-1.000e0",
        "-1.900e0",
        "-1.190e0",
        "-1.119e0",
        "-1.112e0",
        "-1.111e0",
        "9.000e0",
        "9.900e0",
        "9.990e0",
        "9.999e0",
        "1.000e1",
        "1.000e1",
        "1.100e1",
        "1.110e2",
        "1.111e3",
        "1.111e4",
        "1.111e5",
        "-1.900e1",
        "-1.190e2",
        "-1.119e3",
        "-1.112e4",
        "-1.111e5",
        "9.900e1",
        "9.990e2",
        "9.999e3",
        "1.000e5",
        "1.000e6",
        "-9.900e1",
        "-9.990e2",
        "-9.999e3",
        "-1.000e5",
        "-1.000e6"
      ])
    })
    test("With fractSize set to 3 and trimZeroes set to true", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(3, true))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1.1e0",
        "1.11e0",
        "1.111e0",
        "1.111e0",
        "1.111e0",
        "-1e0",
        "-1.9e0",
        "-1.19e0",
        "-1.119e0",
        "-1.112e0",
        "-1.111e0",
        "9e0",
        "9.9e0",
        "9.99e0",
        "9.999e0",
        "1e1",
        "1e1",
        "1.1e1",
        "1.11e2",
        "1.111e3",
        "1.111e4",
        "1.111e5",
        "-1.9e1",
        "-1.19e2",
        "-1.119e3",
        "-1.112e4",
        "-1.111e5",
        "9.9e1",
        "9.99e2",
        "9.999e3",
        "1e5",
        "1e6",
        "-9.9e1",
        "-9.99e2",
        "-9.999e3",
        "-1e5",
        "-1e6"
      ])
    })
    test("With fractSize set to 4", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(4))).toEqual([
        "0.0000e0",
        "0.0000e0",
        "1.0000e-1",
        "1.0000e-2",
        "1.0000e-3",
        "1.0000e-4",
        "1.0000e-5",
        "9.0000e-1",
        "9.0000e-2",
        "9.0000e-3",
        "9.0000e-4",
        "9.0000e-5",
        "1.0000e0",
        "1.1000e0",
        "1.1100e0",
        "1.1110e0",
        "1.1111e0",
        "1.1111e0",
        "-1.0000e0",
        "-1.9000e0",
        "-1.1900e0",
        "-1.1190e0",
        "-1.1119e0",
        "-1.1112e0",
        "9.0000e0",
        "9.9000e0",
        "9.9900e0",
        "9.9990e0",
        "9.9999e0",
        "1.0000e1",
        "1.1000e1",
        "1.1100e2",
        "1.1110e3",
        "1.1111e4",
        "1.1111e5",
        "-1.9000e1",
        "-1.1900e2",
        "-1.1190e3",
        "-1.1119e4",
        "-1.1112e5",
        "9.9000e1",
        "9.9900e2",
        "9.9990e3",
        "9.9999e4",
        "1.0000e6",
        "-9.9000e1",
        "-9.9900e2",
        "-9.9990e3",
        "-9.9999e4",
        "-1.0000e6"
      ])
    })
    test("With fractSize set to 4 and trimZeroes set to true", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(4, true))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1.1e0",
        "1.11e0",
        "1.111e0",
        "1.1111e0",
        "1.1111e0",
        "-1e0",
        "-1.9e0",
        "-1.19e0",
        "-1.119e0",
        "-1.1119e0",
        "-1.1112e0",
        "9e0",
        "9.9e0",
        "9.99e0",
        "9.999e0",
        "9.9999e0",
        "1e1",
        "1.1e1",
        "1.11e2",
        "1.111e3",
        "1.1111e4",
        "1.1111e5",
        "-1.9e1",
        "-1.19e2",
        "-1.119e3",
        "-1.1119e4",
        "-1.1112e5",
        "9.9e1",
        "9.99e2",
        "9.999e3",
        "9.9999e4",
        "1e6",
        "-9.9e1",
        "-9.99e2",
        "-9.999e3",
        "-9.9999e4",
        "-1e6"
      ])
    })
    test("With fractSize set to 5", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(5))).toEqual([
        "0.00000e0",
        "0.00000e0",
        "1.00000e-1",
        "1.00000e-2",
        "1.00000e-3",
        "1.00000e-4",
        "1.00000e-5",
        "9.00000e-1",
        "9.00000e-2",
        "9.00000e-3",
        "9.00000e-4",
        "9.00000e-5",
        "1.00000e0",
        "1.10000e0",
        "1.11000e0",
        "1.11100e0",
        "1.11110e0",
        "1.11111e0",
        "-1.00000e0",
        "-1.90000e0",
        "-1.19000e0",
        "-1.11900e0",
        "-1.11190e0",
        "-1.11119e0",
        "9.00000e0",
        "9.90000e0",
        "9.99000e0",
        "9.99900e0",
        "9.99990e0",
        "9.99999e0",
        "1.10000e1",
        "1.11000e2",
        "1.11100e3",
        "1.11110e4",
        "1.11111e5",
        "-1.90000e1",
        "-1.19000e2",
        "-1.11900e3",
        "-1.11190e4",
        "-1.11119e5",
        "9.90000e1",
        "9.99000e2",
        "9.99900e3",
        "9.99990e4",
        "9.99999e5",
        "-9.90000e1",
        "-9.99000e2",
        "-9.99900e3",
        "-9.99990e4",
        "-9.99999e5"
      ])
    })
    test("With fractSize set to 5 and trimZeroes set to true", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(5, true))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1.1e0",
        "1.11e0",
        "1.111e0",
        "1.1111e0",
        "1.11111e0",
        "-1e0",
        "-1.9e0",
        "-1.19e0",
        "-1.119e0",
        "-1.1119e0",
        "-1.11119e0",
        "9e0",
        "9.9e0",
        "9.99e0",
        "9.999e0",
        "9.9999e0",
        "9.99999e0",
        "1.1e1",
        "1.11e2",
        "1.111e3",
        "1.1111e4",
        "1.11111e5",
        "-1.9e1",
        "-1.19e2",
        "-1.119e3",
        "-1.1119e4",
        "-1.11119e5",
        "9.9e1",
        "9.99e2",
        "9.999e3",
        "9.9999e4",
        "9.99999e5",
        "-9.9e1",
        "-9.99e2",
        "-9.999e3",
        "-9.9999e4",
        "-9.99999e5"
      ])
    })
    test("With fractSize set to 6", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(6))).toEqual([
        "0.000000e0",
        "0.000000e0",
        "1.000000e-1",
        "1.000000e-2",
        "1.000000e-3",
        "1.000000e-4",
        "1.000000e-5",
        "9.000000e-1",
        "9.000000e-2",
        "9.000000e-3",
        "9.000000e-4",
        "9.000000e-5",
        "1.000000e0",
        "1.100000e0",
        "1.110000e0",
        "1.111000e0",
        "1.111100e0",
        "1.111110e0",
        "-1.000000e0",
        "-1.900000e0",
        "-1.190000e0",
        "-1.119000e0",
        "-1.111900e0",
        "-1.111190e0",
        "9.000000e0",
        "9.900000e0",
        "9.990000e0",
        "9.999000e0",
        "9.999900e0",
        "9.999990e0",
        "1.100000e1",
        "1.110000e2",
        "1.111000e3",
        "1.111100e4",
        "1.111110e5",
        "-1.900000e1",
        "-1.190000e2",
        "-1.119000e3",
        "-1.111900e4",
        "-1.111190e5",
        "9.900000e1",
        "9.990000e2",
        "9.999000e3",
        "9.999900e4",
        "9.999990e5",
        "-9.900000e1",
        "-9.990000e2",
        "-9.999000e3",
        "-9.999900e4",
        "-9.999990e5"
      ])
    })
    test("With fractSize set to 6 and trimZeroes set to true", () => {
      expect(numbers.map(x => Rational(x).toScientificNotation(6, true))).toEqual([
        "0e0",
        "0e0",
        "1e-1",
        "1e-2",
        "1e-3",
        "1e-4",
        "1e-5",
        "9e-1",
        "9e-2",
        "9e-3",
        "9e-4",
        "9e-5",
        "1e0",
        "1.1e0",
        "1.11e0",
        "1.111e0",
        "1.1111e0",
        "1.11111e0",
        "-1e0",
        "-1.9e0",
        "-1.19e0",
        "-1.119e0",
        "-1.1119e0",
        "-1.11119e0",
        "9e0",
        "9.9e0",
        "9.99e0",
        "9.999e0",
        "9.9999e0",
        "9.99999e0",
        "1.1e1",
        "1.11e2",
        "1.111e3",
        "1.1111e4",
        "1.11111e5",
        "-1.9e1",
        "-1.19e2",
        "-1.119e3",
        "-1.1119e4",
        "-1.11119e5",
        "9.9e1",
        "9.99e2",
        "9.999e3",
        "9.9999e4",
        "9.99999e5",
        "-9.9e1",
        "-9.99e2",
        "-9.999e3",
        "-9.9999e4",
        "-9.99999e5"
      ])
    })
  })
})